/*
 * Rivet API EE
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EeCloudNamespaceAnalyticsDataSet {
	#[serde(rename = "avg_play_duration", skip_serializing_if = "Option::is_none")]
	pub avg_play_duration: Option<Box<crate::models::EeCloudAvgPlayDurationDataSet>>,
	#[serde(
		rename = "avg_play_duration_by_game_mode",
		skip_serializing_if = "Option::is_none"
	)]
	pub avg_play_duration_by_game_mode:
		Option<Box<crate::models::EeCloudAvgPlayDurationByGameModeDataSet>>,
	#[serde(
		rename = "avg_play_duration_by_region",
		skip_serializing_if = "Option::is_none"
	)]
	pub avg_play_duration_by_region:
		Option<Box<crate::models::EeCloudAvgPlayDurationByRegionDataSet>>,
	#[serde(
		rename = "destroyed_lobbies_by_exit_code",
		skip_serializing_if = "Option::is_none"
	)]
	pub destroyed_lobbies_by_exit_code:
		Option<Box<crate::models::EeCloudDestroyedLobbiesByExitCodeDataSet>>,
	#[serde(
		rename = "destroyed_lobbies_by_failure",
		skip_serializing_if = "Option::is_none"
	)]
	pub destroyed_lobbies_by_failure:
		Option<Box<crate::models::EeCloudDestroyedLobbiesByFailureDataSet>>,
	#[serde(rename = "failed_lobbies", skip_serializing_if = "Option::is_none")]
	pub failed_lobbies: Option<Box<crate::models::EeCloudFailedLobbiesDataSet>>,
	#[serde(rename = "lobby_count", skip_serializing_if = "Option::is_none")]
	pub lobby_count: Option<Box<crate::models::EeCloudLobbyCountDataSet>>,
	#[serde(
		rename = "lobby_count_by_game_mode",
		skip_serializing_if = "Option::is_none"
	)]
	pub lobby_count_by_game_mode: Option<Box<crate::models::EeCloudLobbyCountByGameModeDataSet>>,
	#[serde(
		rename = "lobby_count_by_region",
		skip_serializing_if = "Option::is_none"
	)]
	pub lobby_count_by_region: Option<Box<crate::models::EeCloudLobbyCountByRegionDataSet>>,
	#[serde(rename = "lobby_ready_time", skip_serializing_if = "Option::is_none")]
	pub lobby_ready_time: Option<Box<crate::models::EeCloudLobbyReadyTimeDataSet>>,
	#[serde(
		rename = "matchmaker_overview",
		skip_serializing_if = "Option::is_none"
	)]
	pub matchmaker_overview: Option<Box<crate::models::EeCloudMatchmakerOverviewDataSet>>,
	#[serde(
		rename = "new_lobbies_per_second",
		skip_serializing_if = "Option::is_none"
	)]
	pub new_lobbies_per_second: Option<Box<crate::models::EeCloudNewLobbiesPerSecondDataSet>>,
	#[serde(
		rename = "new_players_per_second",
		skip_serializing_if = "Option::is_none"
	)]
	pub new_players_per_second: Option<Box<crate::models::EeCloudNewPlayersPerSecondDataSet>>,
	#[serde(rename = "player_count", skip_serializing_if = "Option::is_none")]
	pub player_count: Option<Box<crate::models::EeCloudPlayerCountDataSet>>,
	#[serde(
		rename = "player_count_by_game_mode",
		skip_serializing_if = "Option::is_none"
	)]
	pub player_count_by_game_mode: Option<Box<crate::models::EeCloudPlayerCountByGameModeDataSet>>,
	#[serde(
		rename = "player_count_by_region",
		skip_serializing_if = "Option::is_none"
	)]
	pub player_count_by_region: Option<Box<crate::models::EeCloudPlayerCountByRegionDataSet>>,
}

impl EeCloudNamespaceAnalyticsDataSet {
	pub fn new() -> EeCloudNamespaceAnalyticsDataSet {
		EeCloudNamespaceAnalyticsDataSet {
			avg_play_duration: None,
			avg_play_duration_by_game_mode: None,
			avg_play_duration_by_region: None,
			destroyed_lobbies_by_exit_code: None,
			destroyed_lobbies_by_failure: None,
			failed_lobbies: None,
			lobby_count: None,
			lobby_count_by_game_mode: None,
			lobby_count_by_region: None,
			lobby_ready_time: None,
			matchmaker_overview: None,
			new_lobbies_per_second: None,
			new_players_per_second: None,
			player_count: None,
			player_count_by_game_mode: None,
			player_count_by_region: None,
		}
	}
}
