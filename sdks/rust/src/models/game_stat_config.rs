/*
 * Rivet API EE
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// GameStatConfig : A game statistic config.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GameStatConfig {
	#[serde(rename = "aggregation")]
	pub aggregation: crate::models::GameStatAggregationMethod,
	/// Represent a resource's readable display name.
	#[serde(rename = "display_name")]
	pub display_name: String,
	#[serde(rename = "format")]
	pub format: crate::models::GameStatFormatMethod,
	#[serde(rename = "icon_id")]
	pub icon_id: uuid::Uuid,
	/// A string appended to the end of a game statistic's value that is not exactly 1. Example: 45 **dollars**.
	#[serde(rename = "postfix_plural", skip_serializing_if = "Option::is_none")]
	pub postfix_plural: Option<String>,
	/// A string appended to the end of a singular game statistic's value. Example: 1 **dollar**.
	#[serde(rename = "postfix_singular", skip_serializing_if = "Option::is_none")]
	pub postfix_singular: Option<String>,
	/// A string prepended to the beginning of a game statistic's value that is not exactly 1. Example: **values** 45.
	#[serde(rename = "prefix_plural", skip_serializing_if = "Option::is_none")]
	pub prefix_plural: Option<String>,
	/// A string appended to the beginning of a singular game statistic's value. Example: **value** 1.
	#[serde(rename = "prefix_singular", skip_serializing_if = "Option::is_none")]
	pub prefix_singular: Option<String>,
	#[serde(rename = "priority")]
	pub priority: i32,
	#[serde(rename = "record_id")]
	pub record_id: uuid::Uuid,
	#[serde(rename = "sorting")]
	pub sorting: crate::models::GameStatSortingMethod,
}

impl GameStatConfig {
	/// A game statistic config.
	pub fn new(
		aggregation: crate::models::GameStatAggregationMethod,
		display_name: String,
		format: crate::models::GameStatFormatMethod,
		icon_id: uuid::Uuid,
		priority: i32,
		record_id: uuid::Uuid,
		sorting: crate::models::GameStatSortingMethod,
	) -> GameStatConfig {
		GameStatConfig {
			aggregation,
			display_name,
			format,
			icon_id,
			postfix_plural: None,
			postfix_singular: None,
			prefix_plural: None,
			prefix_singular: None,
			priority,
			record_id,
			sorting,
		}
	}
}
