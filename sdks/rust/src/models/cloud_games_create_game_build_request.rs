/*
 * Rivet API EE
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CloudGamesCreateGameBuildRequest {
	#[serde(rename = "compression", skip_serializing_if = "Option::is_none")]
	pub compression: Option<crate::models::CloudGamesBuildCompression>,
	/// Represent a resource's readable display name.
	#[serde(rename = "display_name")]
	pub display_name: String,
	#[serde(rename = "image_file")]
	pub image_file: Box<crate::models::UploadPrepareFile>,
	/// A tag given to the game build.
	#[serde(rename = "image_tag")]
	pub image_tag: String,
	#[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
	pub kind: Option<crate::models::CloudGamesBuildKind>,
	#[serde(rename = "multipart_upload", skip_serializing_if = "Option::is_none")]
	pub multipart_upload: Option<bool>,
}

impl CloudGamesCreateGameBuildRequest {
	pub fn new(
		display_name: String,
		image_file: crate::models::UploadPrepareFile,
		image_tag: String,
	) -> CloudGamesCreateGameBuildRequest {
		CloudGamesCreateGameBuildRequest {
			compression: None,
			display_name,
			image_file: Box::new(image_file),
			image_tag,
			kind: None,
			multipart_upload: None,
		}
	}
}
